{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","classes","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","AddMessageForm","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","reduxForm","form","state","messagesPage","dialogsElements","dialogsData","map","d","messagesElement","messagesData","m","newMessageBody","isAuth","Redirect","dialogs","dialogsItems","messages","values","sendMessage","compose","connect","dispatch","sendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,2GCoBhKC,EAhBI,SAACC,GACnB,IAAIC,EACH,YAAcD,EAAME,GAGrB,OACC,qBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACC,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCKdC,EAVC,SAACT,GAChB,OACC,qBAAKG,UAAWC,IAAQC,OAAxB,SACEL,EAAMU,W,yCCgCJC,EAAcC,YAAiB,IAE/BC,EAAiB,SAACb,GACvB,OACC,uBAAMc,SAAUd,EAAMe,aAAtB,UACC,8BACC,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACdV,KAAK,iBACLW,SAAU,CAACC,IAAUT,GACrBU,YAAY,yBAEjB,8BAAK,gDAOOC,GAFaC,YAAU,CAACC,KAAM,wBAAjBD,CAA0CV,GA9CtD,SAACb,GAEhB,IAAIyB,EAAQzB,EAAM0B,aAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAiBN,GAAI4B,EAAE5B,IAAZ4B,EAAE5B,OAE9E6B,EAAkBN,EAAMO,aAAaH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASvB,QAASuB,EAAEvB,SAAcuB,EAAE/B,OACjEuB,EAAMS,eAQ3B,OAAqB,IAAhBlC,EAAMmC,OAAwB,cAACC,EAAA,EAAD,CAAU7B,GAAG,WAG/C,sBAAKJ,UAAWC,IAAQiC,QAAxB,UACC,qBAAKlC,UAAWC,IAAQkC,aAAxB,SACEX,IAGF,sBAAKxB,UAAWC,IAAQmC,SAAxB,UACC,8BAAMR,IACN,cAAC,EAAD,CAAgBjB,SAdC,SAAC0B,GACpBxC,EAAMyC,YAAYD,EAAON,2B,sCC+BZQ,sBACdC,aAjBqB,SAAClB,GACtB,MAAO,CACNC,aAAcD,EAAMC,iBAIG,SAACkB,GACzB,MAAO,CACNH,YAAa,SAACP,GACbU,EAASC,YAAmBX,SAOhBQ,CAGbpB","file":"static/js/4.b508b049.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2GzCo\",\"dialog\":\"Dialogs_dialog__4RN0m\",\"dialogsItems\":\"Dialogs_dialogsItems__3qkFz\",\"active\":\"Dialogs_active__G_z30\",\"messages\":\"Dialogs_messages__1p2_Z\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\nconst DialogItem = (props) => {\r\n\tlet path =\r\n\t\t'/dialogs/' + props.id\r\n\r\n\r\n\treturn (\r\n\t\t<div className={classes.dialog + \" \" + classes.active}>\r\n\t\t\t<NavLink to={path}>{props.name}</NavLink>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n\treturn (\r\n\t\t<div className={classes.dialog}>\r\n\t\t\t{props.message}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport classes from './Dialogs.module.css'\r\nimport Message from './Message/Message';\r\nimport Redirect from \"react-router-dom/es/Redirect\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validation/validator\";\r\n\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n\tlet state = props.messagesPage;\r\n\r\n\tlet dialogsElements = state.dialogsData.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n\tlet messagesElement = state.messagesData.map(m => <Message message={m.message} key={m.id} />);\r\n\tlet newMessageBody = state.newMessageBody;\r\n\r\n\r\n\r\n\tlet addNewMessage = (values) => {\r\n\t\tprops.sendMessage(values.newMessageBody);\r\n\t}\r\n\r\n\tif (!props.isAuth == false) return <Redirect to='/login'/>;\r\n\r\n\treturn (\r\n\t\t<div className={classes.dialogs}>\r\n\t\t\t<div className={classes.dialogsItems}>\r\n\t\t\t\t{dialogsElements}\r\n\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.messages}>\r\n\t\t\t\t<div>{messagesElement}</div>\r\n\t\t\t\t<AddMessageForm onSubmit={addNewMessage}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props) => {\r\n\treturn (\r\n\t\t<form onSubmit={props.handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t<Field component={Textarea}\r\n\t\t\t\t\t   name='newMessageBody'\r\n\t\t\t\t\t   validate={[required, maxLength50]}\r\n\t\t\t\t\t   placeholder='Enter your message' />\r\n\t\t\t</div>\r\n\t\t\t<div><button>Send</button></div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sendMessageCreator, updateNewMessageBodyCreator } from '../../redux/dialogs-reducer';\r\nimport store from '../../redux/redux-store';\r\nimport Dialogs from './Dialogs';\r\nimport Redirect from \"react-router-dom/es/Redirect\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n\r\n\r\n\r\n\r\n// \treturn <StoreContext.Consumer>\r\n// \t\t{store => {\r\n// \t\t\tlet state = store.getState().messagesPage;\r\n\r\n// \t\t\tlet onSendMessageClick = () => {\r\n// \t\t\t\tstore.dispatch(sendMessageCreator());\r\n// \t\t\t}\r\n// \t\t\tlet onNewMessageChange = (body) => {\r\n// \t\t\t\tstore.dispatch(updateNewMessageBodyCreator(body));\r\n\r\n// \t\t\t}\r\n// \t\t\treturn <Dialogs updateNewMessageBody={onNewMessageChange}\r\n// \t\t\t\tsendMessage={onSendMessageClick}\r\n// \t\t\t\tmessagesPage={state}\r\n// \t\t\t/>\r\n// \t\t}\r\n// \t}\r\n// \t</StoreContext.Consumer>\r\n// }\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tmessagesPage: state.messagesPage\r\n\t}\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tsendMessage: (newMessageBody) => {\r\n\t\t\tdispatch(sendMessageCreator(newMessageBody));\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps, mapDispatchToProps)\r\n\t//withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}